// very bad nodejs code below...sorry...

const fs = require("fs");
const path = require("path");
const _ = require("lodash");
const grpc = require("grpc");
const protoLoader = require("@grpc/proto-loader");
const health = require("grpc-health-check");

const { logger } = require("@opencensus/core");
const tracing = require("@opencensus/nodejs");
const { plugin } = require("@opencensus/instrumentation-grpc");
const { JaegerTraceExporter } = require("@opencensus/exporter-jaeger");

function initJaegerExporter() {
  agentHost = process.env.JAEGER_AGENT_HOST;
  agentPort = process.env.JAEGER_AGENT_PORT
    ? process.env.JAEGER_AGENT_PORT
    : "6832";
  
  if (!agentHost || agentHost === "off") {
    console.log("jaeger exporter not initialized")
    return undefined
  }

  // can probably simplify this by utilizing jaeger's init from env var logic
  return new JaegerTraceExporter({
    serviceName: "casa-account-v2",
    host: agentHost,
    port: agentPort,
    tags: [{ key: "runtime", value: process.versions.node }],
    bufferTimeout: 10, // time in milliseconds
    logger: logger.logger("info"),
  });
}

function initTracing() {
  exporter = initJaegerExporter();
  if (!exporter) {
    console.log("tracing not initialized")
    return
  }

  const tracer = tracing.start({
    samplingRate: 1,
  }).tracer;

  const basedir = path.dirname(require.resolve("grpc"));
  const version = require(path.join(basedir, "package.json")).version;

  // Enables GRPC plugin: Method that enables the instrumentation patch.
  plugin.enable(grpc, tracer, version, /** plugin options */ {}, basedir);

  tracing.registerExporter(exporter).start();
  console.log("tracing initialized");
}

// dynamically load proto files and generates structure
// in memory. not using code generated by protoc here
let PROTO_PATH = __dirname + "/demo-bank.proto";
let packageDefinition = protoLoader.loadSync(PROTO_PATH, {
  keepCase: true,
  longs: String,
  enums: String,
  defaults: true,
  oneofs: true,
});
let api = grpc.loadPackageDefinition(packageDefinition).demobank.api;

function dummyCasaAccount(call, callback) {
  let lastUpdate = {
    seconds: Math.floor(new Date(2020, 4, 31, 18, 19, 20, 0) / 1000 + 3600 * 8),
    nanos: 0,
  };
  let dummy = Object.assign(
    {
      account_id: "00000000",
      nickname: "dummy-v2",
      prod_code: "1111",
      prod_name: "Bottomless CASA",
      currency: "SGD",
      status: "DORMANT",
      status_last_updated: lastUpdate,
      balances: [
        {
          amount: 10.0,
          type: "CURRENT",
          credit_flag: true,
          last_updated: lastUpdate,
        },
        {
          amount: 10.0,
          type: "AVAILABLE",
          credit_flag: true,
          last_updated: lastUpdate,
        },
      ],
    },
    api.CasaAccount
  );

  console.log("returning dummy account data");

  callback(null, dummy);
}

function getServer() {
  let server = new grpc.Server();

  server.addService(
    health.service,
    new health.Implementation({
      "": proto.grpc.health.v1.HealthCheckResponse.ServingStatus.SERVING,
    })
  );

  server.addService(api.CasaAccountService.service, {
    GetAccount: dummyCasaAccount,
  });

  return server;
}

if (require.main === module) {
  initTracing();

  let addr = process.env.GRPC_LISTEN_ADDR;
  if (!addr) {
    addr = "0.0.0.0:50051";
  }
  console.log("starting server listening on ", addr);

  let server = getServer();
  server.bind(addr, grpc.ServerCredentials.createInsecure());
  server.start();
}

exports.getServer = getServer;
